import React from 'react';
import { useParams, Link } from 'react-router-dom';
import SEOHead from '../components/SEOHead';

const vulnerabilityData = {
  'xss': {
    title: 'XSS (Cross-Site Scripting) Scanner - O-Hunter',
    description: 'Detect and prevent XSS vulnerabilities with our advanced Cross-Site Scripting scanner. Test for reflected, stored, and DOM-based XSS attacks.',
    keywords: 'XSS scanner, cross-site scripting, XSS detection, web security, XSS testing, reflected XSS, stored XSS, DOM XSS',
    vulnerability: 'Cross-Site Scripting (XSS)',
    overview: 'Cross-Site Scripting (XSS) is a security vulnerability that allows attackers to inject malicious scripts into web pages viewed by other users.',
    types: [
      {
        name: 'Reflected XSS',
        description: 'Malicious script is reflected off a web server, such as in an error message or search result.'
      },
      {
        name: 'Stored XSS',
        description: 'Malicious script is permanently stored on the target server, such as in a database or comment field.'
      },
      {
        name: 'DOM-based XSS',
        description: 'Vulnerability exists in client-side code rather than server-side code.'
      }
    ],
    impact: [
      'Session hijacking and cookie theft',
      'Defacement of web pages',
      'Redirection to malicious sites',
      'Keylogging and credential theft',
      'Unauthorized actions on behalf of users'
    ],
    prevention: [
      'Input validation and sanitization',
      'Output encoding and escaping',
      'Content Security Policy (CSP)',
      'Use of secure frameworks',
      'Regular security testing'
    ],
    cwe: 'CWE-79',
    owasp: 'A03:2021 – Injection'
  },
  'sql-injection': {
    title: 'SQL Injection Scanner - O-Hunter',
    description: 'Comprehensive SQL injection vulnerability scanner. Detect SQLi attacks including blind, time-based, and error-based SQL injection.',
    keywords: 'SQL injection scanner, SQLi detection, database security, SQL injection testing, blind SQLi, time-based SQLi',
    vulnerability: 'SQL Injection',
    overview: 'SQL Injection is a code injection technique that exploits security vulnerabilities in database layer of applications.',
    types: [
      {
        name: 'Classic SQL Injection',
        description: 'Direct manipulation of SQL queries through user input fields.'
      },
      {
        name: 'Blind SQL Injection',
        description: 'Inference-based attacks where no direct database output is visible.'
      },
      {
        name: 'Time-based SQL Injection',
        description: 'Uses database time delays to infer information about the database.'
      }
    ],
    impact: [
      'Unauthorized data access',
      'Data modification or deletion',
      'Authentication bypass',
      'Remote code execution',
      'Complete system compromise'
    ],
    prevention: [
      'Parameterized queries and prepared statements',
      'Input validation and sanitization',
      'Least privilege database access',
      'Web Application Firewalls (WAF)',
      'Regular security audits'
    ],
    cwe: 'CWE-89',
    owasp: 'A03:2021 – Injection'
  },
  'ssrf': {
    title: 'SSRF (Server-Side Request Forgery) Scanner - O-Hunter',
    description: 'Advanced SSRF vulnerability scanner to detect Server-Side Request Forgery attacks. Test for internal network access and cloud metadata exposure.',
    keywords: 'SSRF scanner, server-side request forgery, SSRF detection, internal network scanning, cloud security, metadata exposure',
    vulnerability: 'Server-Side Request Forgery (SSRF)',
    overview: 'SSRF is a web security vulnerability that allows an attacker to induce the server-side application to make HTTP requests to an arbitrary domain.',
    types: [
      {
        name: 'Basic SSRF',
        description: 'Direct requests to internal or external resources through vulnerable parameters.'
      },
      {
        name: 'Blind SSRF',
        description: 'SSRF where no direct response is returned to the attacker.'
      },
      {
        name: 'Semi-blind SSRF',
        description: 'Limited response information available to determine successful exploitation.'
      }
    ],
    impact: [
      'Internal network reconnaissance',
      'Access to cloud metadata services',
      'Port scanning of internal systems',
      'Bypass of access controls',
      'Data exfiltration from internal services'
    ],
    prevention: [
      'Input validation and URL filtering',
      'Network segmentation',
      'Whitelist allowed destinations',
      'Disable unnecessary URL schemes',
      'Monitor outbound requests'
    ],
    cwe: 'CWE-918',
    owasp: 'A10:2021 – Server-Side Request Forgery'
  },
  'rce': {
    title: 'RCE (Remote Code Execution) Scanner - O-Hunter',
    description: 'Detect Remote Code Execution vulnerabilities with our comprehensive RCE scanner. Test for command injection and arbitrary code execution.',
    keywords: 'RCE scanner, remote code execution, command injection, code execution detection, web security, penetration testing',
    vulnerability: 'Remote Code Execution (RCE)',
    overview: 'Remote Code Execution allows attackers to execute arbitrary code on a target system, often leading to complete system compromise.',
    types: [
      {
        name: 'Command Injection',
        description: 'Injection of operating system commands through vulnerable input fields.'
      },
      {
        name: 'Code Injection',
        description: 'Injection of code in the application\'s programming language.'
      },
      {
        name: 'File Upload RCE',
        description: 'Code execution through malicious file uploads.'
      }
    ],
    impact: [
      'Complete system compromise',
      'Data theft and manipulation',
      'Installation of malware',
      'Lateral movement in networks',
      'Service disruption'
    ],
    prevention: [
      'Input validation and sanitization',
      'Avoid system command execution',
      'Use safe APIs and libraries',
      'Principle of least privilege',
      'Regular security updates'
    ],
    cwe: 'CWE-78',
    owasp: 'A03:2021 – Injection'
  },
  'xxe': {
    title: 'XXE (XML External Entity) Scanner - O-Hunter',
    description: 'Comprehensive XXE vulnerability scanner for XML External Entity attacks. Detect XML parsing vulnerabilities and data exposure.',
    keywords: 'XXE scanner, XML external entity, XXE detection, XML security, XML parsing vulnerabilities, data exposure',
    vulnerability: 'XML External Entity (XXE)',
    overview: 'XXE is a vulnerability that occurs when XML input containing a reference to an external entity is processed by a weakly configured XML parser.',
    types: [
      {
        name: 'Classic XXE',
        description: 'Direct exploitation of external entity references in XML.'
      },
      {
        name: 'Blind XXE',
        description: 'XXE where no direct output is returned to the attacker.'
      },
      {
        name: 'Error-based XXE',
        description: 'XXE exploitation through XML parsing errors.'
      }
    ],
    impact: [
      'Local file disclosure',
      'Internal network scanning',
      'Denial of service attacks',
      'Server-side request forgery',
      'Remote code execution'
    ],
    prevention: [
      'Disable external entity processing',
      'Use secure XML parsers',
      'Input validation and filtering',
      'Use JSON instead of XML',
      'Regular security testing'
    ],
    cwe: 'CWE-611',
    owasp: 'A05:2021 – Security Misconfiguration'
  },
  'open-redirect': {
    title: 'Open Redirect Scanner - O-Hunter',
    description: 'Detect Open Redirect vulnerabilities with our specialized scanner. Test for unvalidated redirects and forwards.',
    keywords: 'open redirect scanner, redirect vulnerability, unvalidated redirects, phishing protection, web security',
    vulnerability: 'Open Redirect',
    overview: 'Open Redirect vulnerabilities occur when a web application accepts user-controlled input that specifies a link to an external site.',
    types: [
      {
        name: 'Header-based Redirect',
        description: 'Redirects controlled through HTTP headers like Location.'
      },
      {
        name: 'JavaScript Redirect',
        description: 'Client-side redirects using JavaScript.'
      },
      {
        name: 'Meta Refresh Redirect',
        description: 'Redirects using HTML meta refresh tags.'
      }
    ],
    impact: [
      'Phishing attacks',
      'Malware distribution',
      'Credential harvesting',
      'Reputation damage',
      'Social engineering attacks'
    ],
    prevention: [
      'Validate redirect destinations',
      'Use whitelist of allowed domains',
      'Avoid user-controlled redirects',
      'Implement proper URL validation',
      'User awareness and warnings'
    ],
    cwe: 'CWE-601',
    owasp: 'A01:2021 – Broken Access Control'
  }
};

const VulnerabilityPage = () => {
  const { vulnerability } = useParams();
  const data = vulnerabilityData[vulnerability];

  if (!data) {
    return (
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-4xl font-bold text-gray-900 dark:text-white mb-4">
            Vulnerability Not Found
          </h1>
          <p className="text-gray-600 dark:text-gray-400 mb-8">
            The requested vulnerability page does not exist.
          </p>
          <Link 
            to="/" 
            className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors"
          >
            Back to Scanner
          </Link>
        </div>
      </div>
    );
  }

  const structuredData = {
    "@context": "https://schema.org",
    "@type": "Article",
    "headline": data.vulnerability,
    "description": data.overview,
    "author": {
      "@type": "Organization",
      "name": "O-Hunter Team"
    },
    "publisher": {
      "@type": "Organization",
      "name": "O-Hunter",
      "logo": {
        "@type": "ImageObject",
        "url": "/logo.png"
      }
    },
    "mainEntityOfPage": {
      "@type": "WebPage",
      "@id": `https://o-hunter.com/${vulnerability}`
    },
    "about": {
      "@type": "Thing",
      "name": data.vulnerability,
      "description": data.overview
    }
  };

  return (
    <>
      <SEOHead 
        title={data.title}
        description={data.description}
        keywords={data.keywords}
        canonicalUrl={`https://o-hunter.com/${vulnerability}`}
        structuredData={structuredData}
      />
      
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
        {/* Header */}
        <header className="bg-white dark:bg-gray-800 shadow-sm">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
            <div className="flex items-center justify-between">
              <Link to="/" className="flex items-center space-x-2">
                <div className="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center">
                  <span className="text-white font-bold text-sm">OH</span>
                </div>
                <span className="text-xl font-bold text-gray-900 dark:text-white">O-Hunter</span>
              </Link>
              <Link 
                to="/" 
                className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
              >
                Start Scanning
              </Link>
            </div>
          </div>
        </header>

        {/* Main Content */}
        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          {/* Hero Section */}
          <div className="text-center mb-16">
            <h1 className="text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-6">
              {data.vulnerability} Scanner
            </h1>
            <p className="text-xl text-gray-600 dark:text-gray-400 max-w-3xl mx-auto mb-8">
              {data.overview}
            </p>
            <div className="flex flex-wrap justify-center gap-4 mb-8">
              <span className="bg-red-100 text-red-800 px-3 py-1 rounded-full text-sm font-medium">
                {data.cwe}
              </span>
              <span className="bg-orange-100 text-orange-800 px-3 py-1 rounded-full text-sm font-medium">
                {data.owasp}
              </span>
            </div>
            <Link 
              to="/" 
              className="bg-blue-600 text-white px-8 py-3 rounded-lg hover:bg-blue-700 transition-colors text-lg font-medium"
            >
              Test Your Website Now
            </Link>
          </div>

          {/* Content Grid */}
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16">
            {/* Types */}
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
              <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">
                Types of {data.vulnerability}
              </h2>
              <div className="space-y-4">
                {data.types.map((type, index) => (
                  <div key={index} className="border-l-4 border-blue-500 pl-4">
                    <h3 className="font-semibold text-gray-900 dark:text-white mb-1">
                      {type.name}
                    </h3>
                    <p className="text-gray-600 dark:text-gray-400 text-sm">
                      {type.description}
                    </p>
                  </div>
                ))}
              </div>
            </div>

            {/* Impact */}
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
              <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">
                Security Impact
              </h2>
              <ul className="space-y-2">
                {data.impact.map((item, index) => (
                  <li key={index} className="flex items-start space-x-2">
                    <span className="text-red-500 mt-1">⚠️</span>
                    <span className="text-gray-600 dark:text-gray-400 text-sm">
                      {item}
                    </span>
                  </li>
                ))}
              </ul>
            </div>

            {/* Prevention */}
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
              <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">
                Prevention Methods
              </h2>
              <ul className="space-y-2">
                {data.prevention.map((item, index) => (
                  <li key={index} className="flex items-start space-x-2">
                    <span className="text-green-500 mt-1">✅</span>
                    <span className="text-gray-600 dark:text-gray-400 text-sm">
                      {item}
                    </span>
                  </li>
                ))}
              </ul>
            </div>
          </div>

          {/* CTA Section */}
          <div className="bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg p-8 text-center text-white">
            <h2 className="text-3xl font-bold mb-4">
              Ready to Test Your Website?
            </h2>
            <p className="text-xl mb-6 opacity-90">
              Use our free {data.vulnerability} scanner to identify vulnerabilities in your web applications.
            </p>
            <Link 
              to="/" 
              className="bg-white text-blue-600 px-8 py-3 rounded-lg hover:bg-gray-100 transition-colors text-lg font-medium inline-block"
            >
              Start Free Scan
            </Link>
          </div>

          {/* Related Vulnerabilities */}
          <div className="mt-16">
            <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-8 text-center">
              Other Vulnerability Scanners
            </h2>
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
              {Object.entries(vulnerabilityData)
                .filter(([key]) => key !== vulnerability)
                .slice(0, 6)
                .map(([key, vuln]) => (
                  <Link 
                    key={key}
                    to={`/${key}`}
                    className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow"
                  >
                    <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">
                      {vuln.vulnerability}
                    </h3>
                    <p className="text-gray-600 dark:text-gray-400 text-sm">
                      {vuln.overview.substring(0, 100)}...
                    </p>
                  </Link>
                ))}
            </div>
          </div>
        </main>

        {/* Footer */}
        <footer className="bg-gray-800 text-white py-8 mt-16">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
            <p>&copy; 2024 O-Hunter. Free Web Vulnerability Scanner.</p>
            <p className="text-gray-400 mt-2">
              Professional security testing tools for developers and security professionals.
            </p>
          </div>
        </footer>
      </div>
    </>
  );
};

export default VulnerabilityPage;

